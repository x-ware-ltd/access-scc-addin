Option Compare Database
Option Explicit

'************************************************
' Create Local SCC Tables
'
' Creates the local source code control tables for
' storing information about the objects being exported
'
' Version history:
' - 1.00 initial version 15/11/2011
' - 1.01 detects old version and upgrades to new SCC tables [SF] 25/05/2012
' - 1.02 adds the new preferences to an existing schema [SF] 04/09/2012
' - 1.03 fix to ensure that old style SVN tables get all schema updates [SF] 04/09/2012
' - 1.04 add SccSystem column [GBW] 05/11/2019
'
' @author Steve Falla <steve.falla@talkjcs.com>
' @suggestions
' @version 1.04
'************************************************
Public Sub CreateLocalSCCTables()
  Dim db As DAO.Database
  
  Set db = CurrentDb()
  
  ' Check for old style SVN tables, and rename/upgrade if needs be
  If TableExists(db, "MSysSVNObjectProperties") Then RenameTable db, "MSysSVNObjectProperties", "MSysSCCObjectProperties"
  If TableExists(db, "MSysSVNTmpObjects") Then RenameTable db, "MSysSVNTmpObjects", "MSysSCCTmpObjects"
  If TableExists(db, "MSysSVNStatus") Then RenameTable db, "MSysSVNStatus", "MSysSCCStatus": RenameField db, "MSysSCCStatus", "objSVNChecksum", "objSCCChecksum"
  If TableExists(db, "MSysSVNPrefs") Then RenameTable db, "MSysSVNPrefs", "MSysSCCPrefs"
  
  ' Check if no tables exist at all and create from scratch
  If Not TableExists(db, "MSysSCCObjectProperties") Then CreateSCCObjectPropertiesTable db
  If Not TableExists(db, "MSysSCCTmpObjects") Then CreateSCCTmpObjectsTable db
  If Not TableExists(db, "MSysSCCStatus") Then CreateSCCStatusTable db
  If Not TableExists(db, "MSysSCCPrefs") Then CreateSCCPrefsTable db
  
  
  AddField db.TableDefs("MSysSCCPrefs"), "ShowCommitWindow", dbBoolean, 0, "Whether to show the commit window, or auto close it", , , , , , , , True
  AddField db.TableDefs("MSysSCCPrefs"), "ShowUpdateWindow", dbBoolean, 0, "Whether to show the update window, or auto close it", , , , , , , , True
  AddField db.TableDefs("MSysSCCPrefs"), "SccSystem", dbLong, 0, "The SCC system in use. From the SccSystem enum", , , , , , , , True
  AddField db.TableDefs("MSysSCCPrefs"), "Library", dbText, 100, "The library these preferences apply to", bRequired:=True, bAllowZeroLength:=True, vDefaultValue:=vbNullString
  AddField db.TableDefs("MSysSCCStatus"), "objSourceLibrary", dbText, 100, "The library these this object comes from", bRequired:=True, bAllowZeroLength:=True, vDefaultValue:=vbNullString

  
  db.Close: Set db = Nothing
End Sub

Private Function CreateSCCObjectPropertiesTable(db As DAO.Database)
  Dim td As DAO.TableDef
  Dim Idx As DAO.Index
  
  Set td = db.CreateTableDef("MSysSCCObjectProperties")
  
  AddField td, "Temp", dbText, 1
  db.TableDefs.Append td
  AddField td, "objType", dbLong, 0, "Object Type identifier", , , , 1
  AddField td, "objName", dbText, 255, "The name of the access object", , , , 0, , True
  AddField td, "objID", dbText, 50, "The internal ID of the access object", , , , 1, , False, True
  AddField td, "ParentID", dbLong, 0, "The object parent ID", , , , 1, , False
  AddField td, "objCreateDate", dbDouble, 0, "The object creation date"
  AddField td, "objUpdateDate", dbDouble, 0, "The object update date"
  AddField td, "objUpdateChecksum", dbText, 50, "The current MD5 Checksum of the object, used when date modified is not available", , , , 0, , False, True
  td.Fields.Delete "Temp"
  
  Set Idx = td.CreateIndex("PrimaryKey")
  With Idx
    .Fields.Append .CreateField("objType")
    .Fields.Append .CreateField("objName")
    .Unique = True
    .Primary = True
    .IgnoreNulls = False
  End With
  td.Indexes.Append Idx
End Function

Private Function CreateSCCTmpObjectsTable(db As DAO.Database)
  Dim td As DAO.TableDef
  Dim Idx As DAO.Index
  
  Set td = db.CreateTableDef("MSysSCCTmpObjects")
  
  AddField td, "Temp", dbText, 1
  db.TableDefs.Append td
  AddField td, "ID", dbLong, 0, "Unique identifier", , , , , True
  AddField td, "objName", dbText, 255, "The name of the access object"
  AddField td, "objType", dbInteger, 0, "The object type"
  AddField td, "objStatus", dbText, 100, "The object status"
  AddField td, "selected", dbBoolean, 0, "If object is selected for import export", , , , , , , , True
  td.Fields.Delete "Temp"
  
  Set Idx = td.CreateIndex("primaryIndex")
  With Idx
    .Fields.Append .CreateField("ID")
    .Unique = True
    .Primary = True
    .IgnoreNulls = False
  End With
  td.Indexes.Append Idx
  
  Set Idx = td.CreateIndex("typeName")
  With Idx
    .Fields.Append .CreateField("objType")
    .Fields.Append .CreateField("objName")
    .Unique = True
    .Primary = False
    .IgnoreNulls = False
  End With
  td.Indexes.Append Idx
  
End Function

Public Function CreateSCCStatusTable(db As DAO.Database)
  Dim tdf As DAO.TableDef
  Dim Idx As DAO.Index
  
  Set tdf = db.CreateTableDef("MSysSCCStatus")
  AddField tdf, "Temp", dbText, 1
  db.TableDefs.Append tdf
  AddField tdf, "objType", dbInteger, 0, "The object Type", , , , , True
  AddField tdf, "objName", dbText, 255, "The name of the access object"
  AddField tdf, "objImportVersion", dbText, 100, "The import version"
  AddField tdf, "objSCCChecksum", dbText, 100, "The current SCC checksum"
  AddField tdf, "objImportDate", dbDouble, 0, "The import date"
  AddField tdf, "objImportChecksum", dbText, 50, "The import MD5 Checksum of the object, used when date modified cannot be used for change check", , , , 0, , False, True
  AddField tdf, "objStatusUnknown", dbBoolean, 0, "Whether the SCC status is unknown", , , , , , , , False
  tdf.Fields.Delete "Temp"
  
  
  With tdf
    Set Idx = .CreateIndex("primaryIndex")
    With Idx
      .Fields.Append .CreateField("objType")
      .Fields.Append .CreateField("objName")
      .Unique = True
      .Primary = True
      .IgnoreNulls = False
    End With
    .Indexes.Append Idx
    
    Set Idx = .CreateIndex("nameIndex")
    With Idx
      .Fields.Append .CreateField("objName")
      .Fields.Append .CreateField("objType")
      .Unique = False
      .Primary = False
      .IgnoreNulls = False
    End With
    .Indexes.Append Idx
    
    Set Idx = .CreateIndex("objStatusUnknown")
    With Idx
      .Fields.Append .CreateField("objStatusUnknown")
      .Unique = False
      .Primary = False
      .IgnoreNulls = False
    End With
    .Indexes.Append Idx
  End With
  
End Function

Private Function CreateSCCPrefsTable(db As DAO.Database)
  Dim td As DAO.TableDef
  Dim strSQL As String
  
  Set td = db.CreateTableDef("MSysSCCPrefs")
  
  AddField td, "Temp", dbText, 1
  db.TableDefs.Append td
  AddField td, "ExportPath", dbText, 255, "The export path to use in this project", , , , , , , , "C:\SVNRoot\"
  AddField td, "CommitAfterExport", dbBoolean, 0, "Whether to perform an SVN commit after the export", , , , , , , , True
  AddField td, "UpdateBeforeImport", dbBoolean, 0, "Whether to perform an SVN update before an import", , , , , , , , True
  AddField td, "QueriesFlag", dbBoolean, 0, "Whether to process queries", , , , , , , , True
  AddField td, "FormsFlag", dbBoolean, 0, "Whether to process forms", , , , , , , , True
  AddField td, "ReportsFlag", dbBoolean, 0, "Whether to process reports", , , , , , , , True
  AddField td, "MacrosFlag", dbBoolean, 0, "Whether to process macros", , , , , , , , True
  AddField td, "ModulesFlag", dbBoolean, 0, "Whether to process modules", , , , , , , , True
  AddField td, "TablesFlag", dbBoolean, 0, "Whether to process tables", , , , , , , , True
  AddField td, "ToolbarsFlag", dbBoolean, 0, "Whether to process toolbars", , , , , , , , True
  AddField td, "ExtrasFlag", dbBoolean, 0, "Whether to process extras", , , , , , , , True
  AddField td, "ReferencesFlag", dbBoolean, 0, "Whether to process references", , , , , , , , True
  AddField td, "ImExSpecsFlag", dbBoolean, 0, "Whether to process import export specs", , , , , , , , True
  AddField td, "RelationshipsFlag", dbBoolean, 0, "Whether to process relationships", , , , , , , , True
  AddField td, "LastImportDate", dbDate, 0, "The Last Date of an import", , , , , , , , True
  AddField td, "LastCheckoutVersion", dbText, 50, "The last version checked out from SVN", , , , , , , , True
  AddField td, "CheckRepoOnSartup", dbBoolean, 0, "Whether to check  the repository version on startup", , , , , , , , True
  AddField td, "ShowCommitWindow", dbBoolean, 0, "Whether to show the commit window, or auto close it", , , , , , , , True
  AddField td, "ShowUpdateWindow", dbBoolean, 0, "Whether to show the update window, or auto close it", , , , , , , , True
  AddField td, "SccSystem", dbLong, 0, "The SCC system in use. From the SccSystem enum", , , , , , , , True
  td.Fields.Delete "Temp"
  
  strSQL = "INSERT INTO [MSysSCCPrefs] (ExportPath) VALUES ('" & CurrentDbDir() & "')"
  db.Execute strSQL
End Function

'************************************************
' TableExists
'
' Tests for the existence of a specific table in
' the passed database
'
' Version history:
' - 1.00 initial version 15/11/2011
'
' @author Steve Falla <steve.falla@talkjcs.com>
' @suggestions
' @version 1.00
' @param  DAO.Database The database to use when testing for the table
' @param  String       The name of the table to test for
' @return Boolean      True if table exists, False if not
'************************************************
Private Function TableExists(db As DAO.Database, strTableName As String) As Boolean
  Dim td As DAO.TableDef
  
  On Error GoTo TableExists_Err
  Set td = db.TableDefs(strTableName)
  
  TableExists = True
TableExists_Exit:
  Exit Function
  
TableExists_Err:
  Resume TableExists_Exit
End Function

'************************************************
' Rename Table
'
' Renames a table in the specified database
' the passed database
'
' Version history:
' - 1.00 initial version 25/05/2012
'
' @author Steve Falla <steve.falla@talkjcs.com>
' @suggestions
' @version 1.00
' @param  DAO.Database The database to use when renaming the table
' @param  String       The name of the table to rename
' @param  String       The name to change the table to
' @return Boolean      True if successful, False if not
'************************************************
Public Function RenameTable(db As DAO.Database, strOldTableName As String, strNewTableName As String) As Boolean
  Dim td As DAO.TableDef

  On Error GoTo RenameTable_Err
  
  If Not TableExists(db, strOldTableName) Then GoTo RenameTable_Exit
  If TableExists(db, strNewTableName) Then GoTo RenameTable_Exit
  
  'Create table object
  Set td = db.TableDefs(strOldTableName)
  td.Name = strNewTableName
  db.TableDefs.Refresh
  RenameTable = True

RenameTable_Exit:
  Set td = Nothing
  Exit Function
  
RenameTable_Err:
  Resume RenameTable_Exit

End Function

'************************************************
' Rename Field
'
' Renames a field in the specified database and table
'
' Version history:
' - 1.00 initial version 25/05/2012
'
' @author Steve Falla <steve.falla@talkjcs.com>
' @suggestions
' @version 1.00
' @param  DAO.Database The database to use
' @param  String       The name of the table
' @param  String       The name of field to rename
' @param  String       The name to change the field to
' @return Boolean      True if successful, False if not
'************************************************
Public Function RenameField(db As DAO.Database, strTblName As String, strOldFldName As String, strNewFldName As String) As Boolean
  Dim td As DAO.TableDef

  On Error GoTo RenameField_Err

  Set td = db.TableDefs(strTblName)
  td.Fields(strOldFldName).Name = strNewFldName

  RenameField = True

RenameField_Exit:
  Set td = Nothing
  Exit Function

RenameField_Err:
   Resume RenameField_Exit

End Function

'************************************************
' Add Field
'
' This sub adds a field to a tabledef but is dependent on the tabledef
' already having been added to the tabledefs collection
' otherwise extended properties will not be added
'
' The iIndexed Field has the following effect:
'   0: No Index
'   1: Indexed, Duplicates allowed
'   2: Indexed, No Duplicates
'   3: Primary Index
'
' Version history:
'   - 1.00 initial version
'
' @author
' @version      1.00
' @suggestions
' @param        TableDef the table definition to use
' @param        String the name of the field to add
' @param        Integer the data type of the new field
' @param        Integer the size of the new field
' @param        String optional param to set the description of the new field
' @param        String optional input mask of the new field
' @param        String optional param to set the format of the new field
' @param        String optional the number of decimal places of the new field
' @param        Integer optional param to set whether the field should be indexed
' @param        Boolean optional param to set whether the field should be auto increment
' @param        Boolean optional param to set whether the field is required (mandatory)
' @param        Boolean optional param to set whether the field can have zero length
' @param        Variant optional param to set the default value of the new field
' @return       Field the definition of the new field
'************************************************
Private Function AddField(td As TableDef, sNAME As String, iType As Integer, iSize As Integer, Optional sDescription As String = "", Optional sInputMask As String = "", Optional sFormat As String = "", Optional sDecimalPlaces As String = "", Optional iIndexed As Integer = 0, Optional bAutoIncrement As Boolean = False, Optional bRequired As Boolean = False, Optional bAllowZeroLength As Boolean = False, Optional vDefaultValue As Variant = Null) As Field
  Dim fd As DAO.Field, prp As DAO.Property, Idx As DAO.Index
  
  If Not InFields(td.Fields, sNAME) Then
    'Only add the field if it does not already exist
    Set fd = td.CreateField(sNAME, iType, iSize)
    If (iType = dbLong) And bAutoIncrement Then fd.Attributes = fd.Attributes Or dbAutoIncrField  'attributes must be changed before appending to the collection
    If (iType = dbGUID) And bAutoIncrement Then
      fd.Properties("DefaultValue").Value = "GenGUID()": fd.Attributes = fd.Attributes Or dbSystemField
    Else
      If Not IsNull(vDefaultValue) Then fd.Properties("DefaultValue").Value = vDefaultValue
    End If
    td.Fields.Append fd
    If sDescription <> "" Then Set prp = fd.CreateProperty("Description", DB_TEXT, sDescription): fd.Properties.Append prp
    If sInputMask <> "" Then Set prp = fd.CreateProperty("InputMask", DB_TEXT, sInputMask): fd.Properties.Append prp
    If sFormat <> "" Then Set prp = fd.CreateProperty("Format", DB_TEXT, sFormat): fd.Properties.Append prp
    If sDecimalPlaces <> "" Then Set prp = fd.CreateProperty("DecimalPlaces", DB_TEXT, sDecimalPlaces): fd.Properties.Append prp
    fd.Required = bRequired
    fd.AllowZeroLength = bAllowZeroLength

    If iIndexed >= 1 Then
      Set Idx = td.CreateIndex(sNAME)
      With Idx
        .Fields.Append .CreateField(sNAME)
        .IgnoreNulls = False
        If iIndexed >= 2 Then .Unique = True Else .Unique = False
        If iIndexed = 3 Then .Primary = True Else .Primary = False
        td.Indexes.Append Idx
      End With
    End If
    Set AddField = fd
  Else
    Set AddField = td.Fields(sNAME)
  End If
End Function

'************************************************
' In Fields
'
' Checks if a specified key exists in a passed Fields collection
'
' Version history:
'   - 1.00 initial version
'
' @author
' @version      1.00
' @suggestions  bad naming of the fields variable
' @param        DAO.Fields Fields, the fields collection to look into
' @param        String sKey, the key to look for in the collection
' @return       Boolean True if key exists, otherwise false
'************************************************
Public Function InFields(ByRef Fields As DAO.Fields, ByRef sKey As String) As Boolean
  Dim tempObj As Field

  On Error GoTo InFields_Err
  
  Set tempObj = Fields(sKey)
  InFields = True

InFields_Exit:
  Exit Function
  
InFields_Err:
  Resume InFields_Exit

End Function