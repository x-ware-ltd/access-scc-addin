Option Compare Database
Option Explicit

Private Declare PtrSafe Sub CopyMemory Lib "kernel32" Alias "RtlMoveMemory" (ByVal Destination As Any, ByVal Source As Any, ByVal Length As LongPtr)

Function IsANSI(strFilename As String) As Boolean
  ' Returns true if the file specified is in ANSI (1 byte per character) format
  ' NB this works by checking that the file is neither UCS2 nor UTF8 so is not a universal test
  ' but is sufficient in the context of this project
  
  IsANSI = False ' intially set to false
  
  If Not IsUCS2(strFilename) Then
    IsANSI = Not IsUTF8(strFilename)
  End If
End Function

Function IsUCS2(strFilename As String) As Boolean
  ' Returns true if the file specified is in UCS2 little endian format
  Dim f As Long
  Dim byts() As Byte
  
  If FileExists(strFilename) Then
    ' load the file into the bytsFile array
    f = FreeFile()
    Open strFilename For Binary Access Read As #f
    If LOF(f) >= 2 Then
      ReDim byts(1)
      Get #f, 1, byts()
      IsUCS2 = ((byts(0) = 255) And (byts(1) = 254)) ' &HFF and &HFE
    End If
    Close #f
  End If
End Function

Function IsUTF8(strFilename As String) As Boolean
  ' Returns true if the file specified is in UTF8 format
  ' NB this needs the BOM to be present in order to identify as UTF8 - this is not strictly in accordance with
  ' UTF8 specififcations, but is the same as many Windows implementations
  Dim f As Long
  Dim byts() As Byte
  
  If FileExists(strFilename) Then
    ' load the file into the bytsFile array
    f = FreeFile()
    Open strFilename For Binary Access Read As #f
    If LOF(f) >= 3 Then
      ReDim byts(2)
      Get #f, 1, byts()
      IsUTF8 = ((byts(0) = 239) And (byts(1) = 187) And (byts(2) = 191)) '&HEF, &HBB, &HBF
    End If
    Close #f
  End If
End Function

Function ConvFile_to_UTF8(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from any of ANSI, UTF-8 or UCS2 into UTF-8 format
  
  ConvFile_to_UTF8 = False ' initially set to false

  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename

  ' deal with case where no conversion is required
  If IsUTF8(strFilename) Then
    If strFilename = strNewFilename Then
      ' do nothing the file is already in UCS2 format
      ConvFile_to_UTF8 = True
    Else
      ' copy file to new location without conversion
      If FileExists(strNewFilename) Then Kill strNewFilename
      FileCopy strFilename, strNewFilename
      ConvFile_to_UTF8 = True
    End If
    Exit Function
  End If
  
  ' we need to do a conversion
  If IsUCS2(strFilename) Then
    ConvFile_to_UTF8 = ConvFileUCS2_to_UTF8(strFilename, strNewFilename)
  ElseIf IsANSI(strFilename) Then
    ' a bit clunky by convert via UCS2
    If Not ConvFileANSI_to_UCS2(strFilename, strNewFilename) Then Exit Function
    ConvFile_to_UTF8 = ConvFileUCS2_to_UTF8(strNewFilename)
  End If
  
End Function

Function ConvFile_to_UCS2(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from any of ANSI, UTF-8 or UCS2 into UCS2 format
  
  ConvFile_to_UCS2 = False ' initially set to false

  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename

  ' deal with case where no conversion is required
  If IsUCS2(strFilename) Then
    If strFilename = strNewFilename Then
      ' do nothing the file is already in UCS2 format
      ConvFile_to_UCS2 = True
    Else
      ' copy file to new location without conversion
      If FileExists(strNewFilename) Then Kill strNewFilename
      FileCopy strFilename, strNewFilename
      ConvFile_to_UCS2 = True
    End If
    Exit Function
  End If
  
  ' we need to do a conversion
  If IsUTF8(strFilename) Then
    ConvFile_to_UCS2 = ConvFileUTF8_to_UCS2(strFilename, strNewFilename)
  ElseIf IsANSI(strFilename) Then
    ConvFile_to_UCS2 = ConvFileANSI_to_UCS2(strFilename, strNewFilename)
  End If
  
End Function

Function ConvFileANSI_to_UCS2(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from ANSI (8 bit) to UCS2 format
  
  Dim byts() As Byte
  Dim bytsOut() As Byte
  Dim lngLen As Long
  Dim lngOutLen As Long
  Dim i As Long
  Dim j As Long
    
  ConvFileANSI_to_UCS2 = False ' initially set to false

  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename

  If ReadFromFile(strFilename, byts) Then
    lngLen = UBound(byts) + 1
    lngOutLen = lngLen * 2 + 2 ' 2 bytes for every ANSI byte plus 2 Byte BOM
    ReDim bytsOut(lngOutLen - 1)
    ' Insert BOM
    bytsOut(0) = 255 ' &HFF
    bytsOut(1) = 254 ' &HFE
    ' j is the position in the output array
    j = 2
    For i = 0 To UBound(byts)
      If Not ANSICP_to_UnicodeCP(byts(i), bytsOut(j + 1), bytsOut(j)) Then Exit Function
      j = j + 2
    Next i
    ConvFileANSI_to_UCS2 = WriteToFile(bytsOut, strNewFilename)
  End If
  
End Function

Function ConvFileUCS2_to_ANSI(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from UCS2 to ANSI format - IF IT CAN!
  ' NB Depending on the file contents it may or may not be possible to actually do this conversion
  
  Dim byts() As Byte
  Dim bytsOut() As Byte
  Dim lngOutLen As Long
  Dim i As Long
  Dim j As Long
  
  ConvFileUCS2_to_ANSI = False ' initially set to false
  
  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename
  
  ' load the file into the bytsFile array
  If ReadFromFile(strFilename, byts) Then
    If byts(LBound(byts)) = 255 And byts(LBound(byts) + 1) = 254 Then  ' 255 = &HFF, 254 = &HFE (the BOM)
      lngOutLen = (UBound(byts) - 1) / 2 ' allows for BOM (Byte Order Mark)
      ReDim bytsOut(lngOutLen - 1)
      j = 0
      For i = LBound(byts) + 2 To UBound(byts) Step 2
        If Not UnicodeCP_to_ANSICP(byts(i + 1), byts(i), bytsOut(j)) Then Exit Function
        j = j + 1
      Next i
      ConvFileUCS2_to_ANSI = WriteToFile(bytsOut, strNewFilename)
    End If
  End If
    
End Function

Function ConvFileUTF8_to_UCS2(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from UTF8 to UCS2 format
  Dim byts() As Byte
  Dim bytsOut() As Byte
  
  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename
  If ReadFromFile(strFilename, byts) Then
    If UTF8_to_UCS2(byts, bytsOut) Then
      ConvFileUTF8_to_UCS2 = WriteToFile(bytsOut, strNewFilename)
    End If
  End If
    
End Function

Function ConvFileUCS2_to_UTF8(strFilename As String, Optional strNewFilename As String) As Boolean
  ' Converts the supplied file from UCS2 to UTF8 format
  Dim byts() As Byte
  Dim bytsOut() As Byte
  
  If LenB(strNewFilename) = 0 Then strNewFilename = strFilename
  If ReadFromFile(strFilename, byts) Then
    If UCS2_to_UTF8(byts, bytsOut) Then
      ConvFileUCS2_to_UTF8 = WriteToFile(bytsOut, strNewFilename)
    End If
  End If
    
End Function

Function ReadFromFile(strFilename As String, byts() As Byte) As Boolean
  ' Reads data from the supplied file into the supplied byte array
  
  Dim f As Long
  
  If FileExists(strFilename) Then
    ' load the file into the bytsFile array
    f = FreeFile()
    Open strFilename For Binary Access Read As #f
    ReDim byts(LOF(f) - 1)
    Get #f, , byts()
    Close #f
    ReadFromFile = True
  End If
End Function

Function WriteToFile(byts() As Byte, strFilename As String) As Boolean
  ' Writes data from the supplied byte array into the file specified
  Dim f As Long
  
  If FileExists(strFilename) Then Kill strFilename
  
  ' Open file ready for output
  f = FreeFile()
  Open strFilename For Binary Access Write As #f
  Put #f, 1, byts
  Close #f
  
  WriteToFile = True
  
End Function

Function UCS2_to_UTF8(bytsUCS2() As Byte, ByRef bytsUTF8() As Byte) As Boolean
  ' This converts a UCS2 Little Endian encoded byte array into UTF8
  ' Returns True if successful, False if it fails for any reason
  
  Dim lenUCS2 As Long
  Dim b As Long ' The next write position in the UTF8 byte array
  Dim i As Long ' The current byte position in UCS2 byte array
  Dim CP_UCS2(1) As Byte
  Dim CP_UTF8() As Byte
  
  UCS2_to_UTF8 = False ' intially set return value to be false
  
  lenUCS2 = UBound(bytsUCS2) - LBound(bytsUCS2) + 1
  
  ' Check that the length of the UCS2 array is at least 2 bytes
  If lenUCS2 < 2 Then Exit Function
  
  ' Check that the length of the UCS2 array is an even number of bytes
  If lenUCS2 Mod 2 <> 0 Then Exit Function
  
  ' Check that the supplied array has the correct Byte Order Mark (BOM)
  If bytsUCS2(LBound(bytsUCS2)) <> 255 Or bytsUCS2(LBound(bytsUCS2) + 1) <> 254 Then Exit Function '255 = &HFF, 254 = &HFE
  
  ' Redim bytsUTF8 to the maximum it can be ( max 3 bytes per character )
  ' for each 2 bytes in UCS2 need potentially 3 bytes in UTF8
  ReDim bytsUTF8(lenUCS2 * 3 / 2 - 1)
  
  b = 0
  
  For i = LBound(bytsUCS2) To UBound(bytsUCS2) Step 2
    CopyMemory VarPtr(CP_UCS2(0)), VarPtr(bytsUCS2(i)), 2 ' Copy CodePoint into CP array
    If Not UCS2CP_to_UTF8CP(CP_UCS2, CP_UTF8) Then Exit Function
    CopyMemory VarPtr(bytsUTF8(b)), VarPtr(CP_UTF8(0)), UBound(CP_UTF8) + 1
    b = b + UBound(CP_UTF8) + 1
  Next
  
  ReDim Preserve bytsUTF8(b - 1)
  UCS2_to_UTF8 = True
  
End Function

Function UTF8_to_UCS2(bytsUTF8() As Byte, ByRef bytsUCS2() As Byte) As Boolean
  ' This converts a UTF8 encoded byte array into ucs2 Little Endian
  ' Returns True if successful, False if it fails for any reason
  
  Dim b As Long ' The next write position in the UCS2 array
  Dim CP_UCS2() As Byte
  Dim lenUTF8 As Long
  Dim i As Long
  Dim j As Long
  
  UTF8_to_UCS2 = False ' intially set return value to be false
  
  lenUTF8 = UBound(bytsUTF8) - LBound(bytsUTF8) + 1
  
  ' Check that the length of the UTF8 array is at least 3 bytes
  If lenUTF8 < 3 Then Exit Function
  
  ' Check that the supplied array has the correct Byte Order Mark (BOM)
  If bytsUTF8(LBound(bytsUTF8)) <> 239 Or bytsUTF8(LBound(bytsUTF8) + 1) <> 187 Or bytsUTF8(LBound(bytsUTF8) + 2) <> 191 Then Exit Function '239 = &HEF, 187 = &HBB, 191 = &HBF
  
  ' Redim bytsUCS2 to the maximum it can be (2 bytes for each byte in UTF8)
  ReDim bytsUCS2(lenUTF8 * 2 - 1)
  
  b = 0
  
  For i = LBound(bytsUTF8) To UBound(bytsUTF8)
    j = UTF8CP_to_UCS2CP(bytsUTF8, i, CP_UCS2) 'j represents the length of the UTF8 character found (in bytes)
    If j = 0 Then Exit Function
    CopyMemory VarPtr(bytsUCS2(b)), VarPtr(CP_UCS2(0)), 2
    b = b + 2
    i = i + j - 1 ' if UTF8 was more than 1 byte, skip forwards
  Next
  
  ReDim Preserve bytsUCS2(b - 1)
  UTF8_to_UCS2 = True
  
End Function

Function PopulateANSI_Unicode_BestFit(ByRef lngsMap() As Long)
  ' returns a byte array containing a Best Fit map of ANSI (Windows-1252) to Unicode
  ' NB if the array passed in has already been dim'd then it will be unchanged by this function
  ' We store these as longs (32 bit) and each value is a maximum of 14 bits so we don't need to worry about any issues with MS Access not having unsigned ints
  
  If Not lngsMap Then
    ' The array has not been populated yet
    ReDim lngsMap(128 To 159)
    ' unused codes &H81 (129), &H8D (141), &H8F (143), &H90 (144) and &H9D (157) are mapped to -1,
    ' the user of lngsMap should pick a -1 up as a failure to convert
    lngsMap(128) = &H20AC: lngsMap(129) = -1:     lngsMap(130) = &H201A: lngsMap(131) = &H192
    lngsMap(132) = &H201E: lngsMap(133) = &H2026: lngsMap(134) = &H2020: lngsMap(135) = &H2021
    lngsMap(136) = &H2C6:  lngsMap(137) = &H2030: lngsMap(138) = &H160:  lngsMap(139) = &H2039
    lngsMap(140) = &H152:  lngsMap(141) = -1:     lngsMap(142) = &H17D:  lngsMap(143) = -1
    lngsMap(144) = -1:     lngsMap(145) = &H2018: lngsMap(146) = &H2019: lngsMap(147) = &H201C
    lngsMap(148) = &H201D: lngsMap(149) = &H2022: lngsMap(150) = &H2013: lngsMap(151) = &H2014
    lngsMap(152) = &H2DC:  lngsMap(153) = &H2122: lngsMap(154) = &H161:  lngsMap(155) = &H203A
    lngsMap(156) = &H153:  lngsMap(157) = -1:     lngsMap(158) = &H17E:  lngsMap(159) = &H178
  End If
  
End Function

Function ANSICP_to_UnicodeCP(bytANSI As Byte, ByRef bytUnicodeMSB As Byte, ByRef bytUnicodeLSB As Byte) As Boolean
  ' Takes a single byte ANSI codepoint (character) and converts it to 16 bit Unicode placing the answer
  ' in 2 separate Bytes representing the MSB (Most Significant Byte) and LSB (Least Significant Byte)
  Static bytsUnicodeBestFit() As Long
  Const lngLSBMask = 255 ' constant with Least Significant 8 bits set to 1
  
  ANSICP_to_UnicodeCP = False ' initially set to False
  
  If bytANSI < 128 Or bytANSI >= 160 Then
    bytUnicodeMSB = 0
    bytUnicodeLSB = bytANSI
  Else
    ' in this range we neede to use the best  fit lookup table
    Call PopulateANSI_Unicode_BestFit(bytsUnicodeBestFit)
    If bytsUnicodeBestFit(bytANSI) = -1 Then
      ' a best fit cannot be found
      Exit Function
    End If
    bytUnicodeMSB = Fix(bytsUnicodeBestFit(bytANSI) / 256)
    bytUnicodeLSB = bytsUnicodeBestFit(bytANSI) And lngLSBMask
  End If
        
  ANSICP_to_UnicodeCP = True
  
End Function

Function UnicodeCP_to_ANSICP(bytUnicodeMSB As Byte, bytUnicodeLSB As Byte, ByRef bytANSI As Byte) As Boolean
  ' Take a 2 byte Unicode codepoint and converts it to 8 bit ANSI placing the answer in the byt provided
  ' MSB = Most Significant Byte, LSB = Least Significant Byte
  ' Returns False if the character cannot be mapped
  
  Static bytsUnicodeBestFit() As Long
  Dim lngUnicode As Long
  Dim i As Long
  
  UnicodeCP_to_ANSICP = False ' intially set to False
  
  If bytUnicodeMSB = 0 Then
    ' we have a single byte value
    If bytUnicodeLSB < 128 Then
      bytANSI = bytUnicodeLSB
      UnicodeCP_to_ANSICP = True
    ElseIf bytUnicodeLSB >= 160 Then
      bytANSI = bytUnicodeLSB
      UnicodeCP_to_ANSICP = True
    Else
      ' we have a value in the range 128 (&H80) to 159 (&H9F) which shouldn't be possible so do nothing to return a fail
      Exit Function
    End If
  Else
    ' we have a codepoint taking 2 bytes so see if it appears in our bestfit table
    Call PopulateANSI_Unicode_BestFit(bytsUnicodeBestFit) ' populate the best fit table (if not already done)
    lngUnicode = bytUnicodeMSB * 256 + bytUnicodeLSB ' calculate the full Unicode value
    For i = 128 To 159
      If bytsUnicodeBestFit(i) = lngUnicode Then
        bytANSI = i
        UnicodeCP_to_ANSICP = True
        Exit For
      End If
    Next i
  End If
End Function

' The 2 Functions UTF8CP_to_UCS2CP and UCS2CP_to_UTF8CP convert individual Codepoints (characters) to/from the 2 encodings
' The format of UTF8 is laid out below (extract from wikipedia)
'
' Since the restriction of the Unicode code-space to 21-bit values in 2003, UTF-8 is defined to encode code points in one to
' four bytes, depending on the number of significant bits in the numerical value of the code point. The following table shows
' the structure of the encoding. The x characters are replaced by the bits of the code point. If the number of significant
' bits is no more than seven, the first line applies; if no more than 11 bits, the second line applies, and so on.
'
' Number    Bits for    First       Last           Byte 1    Byte 2    Byte 3    Byte 4
' of bytes  code point  code point  code point
'    1          7         U+0000      U+007F      0xxxxxxx
'    2         11         U+0080      U+07FF      110xxxxx  10xxxxxx
'    3         16         U+0800      U+FFFF      1110xxxx  10xxxxxx  10xxxxxx
'    4         21         U+10000     U+10FFFF    11110xxx  10xxxxxx  10xxxxxx  10xxxxxx
'
' MS Access always converts Hex literals into the smallest integer they will fit into before assigning to a variable
' and also has no concept of unsigned integers.
' Therefore:
'   lngExample = &HFFFF
' will return -1 rather than 65535 as would be expected (it is first converted to an Integer (16 bit)
' before being assigned to the long.
' To ensure this doesn't mess up our code we use decimal notation but comment where appropriate with the Hex or Binary equivalent

Private Function UTF8CP_to_UCS2CP(bytsUTF8() As Byte, lngPosn As Long, bytsUCS2() As Byte) As Long
  ' This function takes a UTF8 byte array and converts the codepoint at location lngPosn into a UCS2 byte array (length 2)
  ' In the event of an error this function returns zero, otherwise it returns the number
  ' of bytes which were used to encode the UTF8 character
  
  Dim c As Long
  
  UTF8CP_to_UCS2CP = 0 ' intitally set to zero (fail)
  
  If lngPosn > UBound(bytsUTF8) Then Exit Function
  If lngPosn < LBound(bytsUTF8) Then Exit Function
  
  ReDim bytsUCS2(1) ' always 2 bytes
  
  If (bytsUTF8(lngPosn) And 128) = 0 Then '128 = 1000 0000 'this byte is 0xxx xxxx
    ' We have a single byte UTF8
    bytsUCS2(0) = bytsUTF8(lngPosn)
    bytsUCS2(1) = 0
    UTF8CP_to_UCS2CP = 1
  ElseIf (bytsUTF8(lngPosn) And 224) = 192 Then  '224 = 1110 0000, 192 = 1100 0000 'this byte is 110x xxxx
    If UBound(bytsUTF8) < lngPosn + 1 Then Exit Function 'check we have enough bytes left
    If (bytsUTF8(lngPosn + 1) And 192) <> 128 Then Exit Function '192 = 1100 0000, 128 = 1000 0000 2nd byte must be 10xx xxxx
    ' We have a valid 2 byte UTF8
    c = bit16ShiftL((bytsUTF8(lngPosn) And 31), 6) '31 = 0001 1111
    c = c Or (bytsUTF8(lngPosn + 1) And 63) '63 = 0011 1111
    bytsUCS2(0) = c And 255 '255 = 1111 1111  least significant byte
    bytsUCS2(1) = bit16ShiftR(c, 8) ' most significant Byte
    UTF8CP_to_UCS2CP = 2
  ElseIf (bytsUTF8(lngPosn) And 240) = 224 Then '240 = 1111 0000, 224 = 1110 0000 'this byte is 1110 xxxx
    If UBound(bytsUTF8) < lngPosn + 2 Then Exit Function 'check we have enough bytes left
    If (bytsUTF8(lngPosn + 1) And 192) <> 128 Then Exit Function '2nd byte must be 10xx xxxx
    If (bytsUTF8(lngPosn + 2) And 192) <> 128 Then Exit Function '3rd byte must be 10xx xxxx
    ' We have a valid 3 byte UTF8
    c = bit16ShiftL((bytsUTF8(lngPosn) And 15), 12) '15 = 0000 1111
    c = c Or bit16ShiftL((bytsUTF8(lngPosn + 1) And 63), 6) '63 = 0011 1111
    c = c Or (bytsUTF8(lngPosn + 2) And 63)    '63 = 0011 1111
    bytsUCS2(0) = c And 255 '255 = 1111 1111  least significant byte
    bytsUCS2(1) = bit16ShiftR(c, 8) ' most significant Byte
    UTF8CP_to_UCS2CP = 3
  Else
    ' we cannot deal with 4 byte UTF8 (it cannot be represented in 2 Bytes) so we return an error
    Exit Function
  End If
    
End Function

Private Function UCS2CP_to_UTF8CP(bytsUCS2() As Byte, bytsUTF8() As Byte) As Boolean
  ' This function takes a 2 byte zero based array encoded in UCS2 and returns a 1 to 3 byte array encoded in UTF8
  
  Dim lngCodePoint As Long ' this is used to represent the character we have
  
  UCS2CP_to_UTF8CP = False ' intially set return value to be false
  
  If LBound(bytsUCS2) <> 0 Then Exit Function
  If UBound(bytsUCS2) <> 1 Then Exit Function
  
  lngCodePoint = CLng(bytsUCS2(1)) * 256 + CLng(bytsUCS2(0)) ' Little Endian
  
  If lngCodePoint < 128 Then '128 = &H80
    ' encoded in 1 byte in UTF8
    ReDim bytsUTF8(0)
    bytsUTF8(0) = lngCodePoint
    UCS2CP_to_UTF8CP = True
  ElseIf lngCodePoint < 2048 Then '2048 = &H0800
    ' encoded in 2 bytes in UTF8
    ReDim bytsUTF8(1)
    bytsUTF8(1) = (lngCodePoint And 63) Or 128 ' 63 = 00111111, 128 = 10000000
    lngCodePoint = bit16ShiftR(lngCodePoint, 6)
    bytsUTF8(0) = (lngCodePoint And 31) Or 192 ' 31 = 00011111, 192 = 11000000
    UCS2CP_to_UTF8CP = True
  Else
    ' encoded in 3 bytes in UTF8
    ReDim bytsUTF8(2)
    bytsUTF8(2) = (lngCodePoint And 63) Or 128 ' 63 = 0011 1111, 128 = 1000 0000
    lngCodePoint = bit16ShiftR(lngCodePoint, 6)
    bytsUTF8(1) = (lngCodePoint And 63) Or 128 ' 63 = 0011 1111, 128 = 1000 0000
    lngCodePoint = bit16ShiftR(lngCodePoint, 6)
    bytsUTF8(0) = (lngCodePoint And 15) Or 224 ' 15 = 00001111, 224 = 11100000
    UCS2CP_to_UTF8CP = True
  End If
End Function
Private Function bit16ShiftL(i As Long, s As Integer) As Long
  ' takes a 16 bit numeric (passed in as Long) and bit shifts it left by the specified number of bits
  bit16ShiftL = bit16ShiftR(i, -s)
End Function

Private Function bit16ShiftR(i As Long, s As Integer) As Long
  ' takes 16 bit numeric (passed in as long) and bit shifts it right by the specified number of bits
  ' if we are shifting left (-ve s) then we will loose the left most s bits
  
  If s > 15 Then bit16ShiftR = 0: Exit Function
  If s < -15 Then bit16ShiftR = 0: Exit Function
  bit16ShiftR = i And 65535 '&HFFFF
  
  bit16ShiftR = Fix(bit16ShiftR / (2 ^ s))
  
  bit16ShiftR = bit16ShiftR And 65535 '&HFFFF ' ensure we only have least significant 16 bits
End Function

Function ConvFileUTF8_to_ANSI(strFilename As String, Optional strNewFilename As String) As Boolean
  
  ConvFileUTF8_to_ANSI = False
  
  If ConvFileUTF8_to_UCS2(strFilename, strNewFilename) Then
    If ConvFileUCS2_to_ANSI(strNewFilename, strNewFilename) Then
      ConvFileUTF8_to_ANSI = True
    End If
  End If
End Function