Option Compare Database
Option Explicit

Public Const REG_SZ As Long = 1 'String
Public Const REG_DWORD As Long = 4 'Number

Public Const HKEY_CLASSES_ROOT = &H80000000
Public Const HKEY_CURRENT_USER = &H80000001
Public Const HKEY_LOCAL_MACHINE = &H80000002
Public Const HKEY_USERS = &H80000003

Private Const ERROR_NONE = 0
Private Const ERROR_BADDB = 1
Private Const ERROR_BADKEY = 2
Private Const ERROR_CANTOPEN = 3
Private Const ERROR_CANTREAD = 4
Private Const ERROR_CANTWRITE = 5
Private Const ERROR_OUTOFMEMORY = 6
Private Const ERROR_ARENA_TRASHED = 7
Private Const ERROR_ACCESS_DENIED = 8
Private Const ERROR_INVALID_PARAMETERS = 87
Private Const ERROR_NO_MORE_ITEMS = 259

Private Const KEY_QUERY_VALUE = &H1
Private Const KEY_SET_VALUE = &H2
Private Const KEY_ALL_ACCESS = &H3F

Private Const KEY_WOW64_64KEY = &H100
Private Const KEY_WOW64_32KEY = &H200

Private Const REG_OPTION_NON_VOLATILE = 0

Declare PtrSafe Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As LongPtr) As Long
Declare PtrSafe Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As LongPtr, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As LongPtr) As Long
Declare PtrSafe Function RegQueryValueExString Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long
Declare PtrSafe Function RegQueryValueExLong Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, lpData As Long, lpcbData As Long) As Long
Declare PtrSafe Function RegQueryValueExNULL Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hKey As LongPtr, ByVal lpValueName As String, ByVal lpReserved As LongPtr, lpType As Long, ByVal lpData As Long, lpcbData As Long) As Long
   
'************************************************
' Query Registry Value
'
' Query the value of a registry entry.
'
' With this procedure, a call of:
' QueryValue HKEY_CURENT_USER, "TestKey\SubKey1", "StringValue"
' will display a message box with the current setting of the "StringValue" value, and assumes that
' "StringValue" exists in the "TestKey\SubKey1" key.
'
' Version history:
'   - 1.00 initial version
'
' @author
' @version      1.00
' @suggestions
' @param        Long a handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right, or it can be one of HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG,HKEY_CURRENT_USER,HKEY_LOCAL_MACHINE, HKEY_USERS
' @param        String the registry name to look for
' @param        Variant ByRef value of the entry returned after running this function
' @return       String the value of the data at the specified key
'************************************************
Public Function xwRegQueryValue(ByVal lPredefinedKey As Long, sKeyName As String, sValueName As String) As String
    Dim lRetVal As Long         'result of the API functions
    Dim hKey As LongPtr            'handle of opened key
    Dim vValue As Variant       'setting of queried value

    lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_QUERY_VALUE, hKey)
    If lRetVal = ERROR_BADKEY Then 'Key doesnt exist
      ' Try for the 64 bit version of the key
      lRetVal = RegOpenKeyEx(lPredefinedKey, sKeyName, 0, KEY_QUERY_VALUE + KEY_WOW64_64KEY, hKey)
      If lRetVal = ERROR_BADKEY Then 'Key really doesnt exist
        xwRegQueryValue = vbNullString
        Exit Function
      End If
    End If
    Call xwRegError(lRetVal, "xwRegQueryValue")
    lRetVal = QueryValueEx(hKey, sValueName, vValue)
    Call xwRegError(lRetVal, "xwRegQueryValue1")
    RegCloseKey (hKey)
    
    xwRegQueryValue = vValue
End Function

'************************************************
' Query Registry Value
'
' Query the value of a registry entry.
'
' Version history:
'   - 1.00 initial version
'
' @author
' @version      1.00
' @suggestions
' @param        Long a handle to an open registry key. The key must have been opened with the KEY_QUERY_VALUE access right, or it can be one of HKEY_CLASSES_ROOT,HKEY_CURRENT_CONFIG,HKEY_CURRENT_USER,HKEY_LOCAL_MACHINE, HKEY_USERS
' @param        String the registry name to look for
' @param        Variant BtRef value of the entry returned after running this function
' @return       Long ERROR_SUCCESS on success, else a system error code
'************************************************
Function QueryValueEx(ByVal lhKey As LongPtr, ByVal szValueName As String, vValue As Variant) As Long
  Dim cch As Long, lrc As Long, lType As Long, lValue As Long
  Dim sValue As String

  On Error GoTo QueryValueExError

  ' Determine the size and type of data to be read
  lrc = RegQueryValueExNULL(lhKey, szValueName, 0&, lType, 0&, cch)
  If lrc <> ERROR_NONE Then GoTo QueryValueExExit

  Select Case lType
      ' For strings
    Case REG_SZ:
      sValue = String(cch, 0)

      lrc = RegQueryValueExString(lhKey, szValueName, 0&, lType, sValue, cch)
      If lrc = ERROR_NONE Then
        vValue = Left$(sValue, cch - 1)
      Else
        vValue = Empty
      End If
      ' For DWORDS
    Case REG_DWORD:
      lrc = RegQueryValueExLong(lhKey, szValueName, 0&, lType, lValue, cch)
      If lrc = ERROR_NONE Then vValue = lValue
    Case Else
      'all other data types not supported
      lrc = -1
  End Select

QueryValueExExit:
  QueryValueEx = lrc
  Exit Function

QueryValueExError:
  Resume QueryValueExExit
End Function

'************************************************
' Registry Error
'
' Will display a human readable error in a popup message box
' if a suitable error exists
'
' Version history:
'   - 1.00 initial version
'
' @author
' @version      1.00
' @suggestions
' @param        Long error code to examine
' @param        String the procedure name where the call came from
'************************************************
Private Sub xwRegError(ErrCode As Long, strProcName As String)
  Dim strErr As String
  Select Case ErrCode
    Case ERROR_NONE: Exit Sub
    Case ERROR_BADDB: strErr = "Corrupt Registry File"
    Case ERROR_BADKEY: Exit Sub  'This error happens if the registry key doesnt exist
    Case ERROR_CANTOPEN: strErr = "Unable to Open the Registry"
    Case ERROR_CANTREAD: strErr = "Unable to Read the Registry"
    Case ERROR_CANTWRITE: strErr = "Unable to write to the Registry"
    Case ERROR_OUTOFMEMORY: strErr = "Out of Memory"
    Case ERROR_ARENA_TRASHED: strErr = "Registry Error"
    Case ERROR_ACCESS_DENIED: strErr = "Registry Access Denied"
    Case ERROR_INVALID_PARAMETERS: strErr = "Error Accessing Registry"
    Case ERROR_NO_MORE_ITEMS: strErr = "No More Items Found in Registry"
    Case Else: strErr = "Error Accessing Registry"
  End Select
  MsgBox strErr, vbCritical, strProcName
End Sub